c!
continue
@wallet.pokemons.include?(pokemon)
pokemon
continue
pokemon.first.value_in_dollar(@bitcoin_value)
pokemon.first
pokemon
continue
params[:transaction][:value].to_f
continue
avaluation = invested + balance
balance
invested
avaluation
continue
User.last
balance
exit
balance * bitcoin_value
@wallet
wallet
balance.round(2)
avaluation
invested
continue
pokemons.each {|pokemon| p pokemon.first}
pokemons.each
continue
pokemon.first.value_in_dollar(@bitcoin_value)
continue
@pokemons.first.value_in_dollar(@bitcoin_value)
continue
sum
continue
@wallet.pokemons[@pokemon][:amount] >= @amount
@wallet.pokemons[@pokemon]
@wallet.pokemons.include?(@pokemon)
@wallet.pokemons
continue
current_pokemon_value
pokemon
continue
a = @wallet.wallet_invested_by_pokemon(pokemon.last, btc_to_usd(@bitcoin_value, pokemon.first.value_in_bitcoin))
continue
sum
continue
@user_pokemons
@user_pokemons
continue
@user_pokemons
continue
pokemon.first.value_in_bitcoin
btc_to_usd(@bitcoin_value, pokemon.value_in_bitcoin)
pokemon.value_in_bitcoin
@pokemons
pokemon
@wallet
pokemon.last[:amount]
pokemon.last.amount
pokemon
continue
pokemons
continue
@wallet.invested_balance
exit
Wallet.where(user_id: current_user.id).first.invested_balance
current_user.id
Wallet.find(user_id: current_user.id)
Wallet.find(current_user)
continue
Wallet.find(user_id: current_user)
@wallet.instance_methods
@wallet.invested_balance
continue
@wallet.invested_balance
continue
 @wallet.invested_balance
@wallet.invested_balance
@bitcoin_value
continue
sum
continue
pokemon.last
pokemon = @user_pokemons.first
continue
@user_pokemons.first
continue
params
continue
exit
params
continue
transaction.pokemon.name
continue
@current_user.wallet.transactions
continue
exit
@current_user.wallet.transactions
@transactions.first.pokemon.name
continue
Transaction.new(operation: 'buy', value: @value, amount: @amount, wallet_id: @current_user.wallet.id, pokemon: @pokemon).save
Transaction.new
continue
exit
@transactions.pokemon
continue
@transactions
continue
Transaction.new(operation: 'buy', value: @value, amount: @amount, wallet_id: @current_user.wallet.id, pokemon: @pokemon)
Transaction.new(operation: 'buy', value: @value, amount: @amount, wallet: @current_user.wallet,pokemon_o)
@pokemon
Transaction.new(operation: 'buy', value: @value, amount: @amount, wallet_id: @current_user.wallet,pokemon: @pokemon)
continue
exit
Pokemon.new
Transaction.new(operation: 'buy', value: @value, amount: @amount, wallet_id: @current_user.wallet.id, pokemon_id: @pokemon.id)
continue
exit
Transaction.new(operation: 'buy', value: @value, amount: @amount, wallet_id: @current_user.wallet,pokemon_id: @pokemon)
Transaction.new
continue
exit
Transaction.new()
exit
Transaction.new
Transaction.new(operation: 'buy', value: @value, amount: @amount, wallet_id: @current_user.wallet,pokemon: [@pokemon])
continue
@pokemon.serialize_hash
a = Transaction.new(operation: 'buy', value: @value, amount: @amount, wallet_id: @current_user.wallet, pokemon: @pokemon)
   21:                                     wallet_id: @current_user.wallet, pokemon: @pokemon)
Transaction.new(operation: 'buy', value: @value, amount: @amount,
@pokemon
@pokemon)
continue
current_user.wallet.transactions
continue
exit
@wallet = current_user.wallet
@transactions.first.pokemon_id
continue
@transactions.first
continue
 @current_user.wallet.balance -= @value * @amount
@value * @amount
@value 
@current_user.wallet.balance
continue
@current_user.wallet.balance += @value * @amount
@value * @amount
@amount
@value
@current_user.wallet.balance
continue
@wallet.pokemons[@pokemon]
@wallet.pokemons.include?(@pokemon) && @wallet.pokemons[@pokemon] >= @amount
@wallet.pokemons[@pokemon] >= @amount
@wallet.pokemons.include? @pokemon
@wallet.pokemons.include? @pokemon && @wallet.pokemons[@pokemon] >= @amount
@wallet.pokemons[@pokemon] >= @amount
@wallet.pokemons.include? @pokemon
continue
check_transaction
unless check_transaction
wallet
amount
pokemon
check_transaction
exit
continue
exit
@pokemon
@current_user.wallet.pokemons[@pokemon] += amount
@current_user.wallet.pokemons
@pokemon
@current_user.wallet.pokemons[@pokemon]
continue
Transaction.new(operation: 'buy', value: @value, amount: @amount, wallet_id: @current_user.wallet.id, pokemon_id: @pokemon.id)
Transaction.new(operation: 'buy', value: @value, amount: @amount, wallet_id: @current_user.wallet, pokemon_id: @pokemon)
                                    wallet_id: @current_user.wallet, pokemon_id: @pokemon)
      transaction = Transaction.new(operation: 'buy', value: @value, amount: @amount,
                                    wallet_id: @current_user.wallet, pokemon_id: @pokemon)
      transaction = Transaction.new(operation: 'buy', value: @value, amount: @amount,
Transaction.new
@current_user
@value
@amount
@pokemon
new_transaction
continue
value
wallet.balance
check_transaction
continue
exit
transaction_params[:value].to_f
transaction_params[:value]
value
exit
pokemon_btc_value_to_usd(@bitcoin_value, pokemon.base_experience)
pokemon
value
amount
continue
params.require(:transaction).permit(:pokemon, :amount, :value)
params
params.require(:transaction).permit(:pokemon, :amount, :value)
    params.require(:transaction).permit(%i[pokemon amount value])
transaction_params[:amount]
params
amount
continue
params.require(:transaction).permit([:pokemon, :amount, :value])
paramsparams.require(:transaction).permit([:pokemon, :amount, :value])
continue
params.require(:transaction).permit([:pokemon, :amount, :value])
continue
continue)
params.dig.(:pokemon, :amount, :value)
transaction_params
params.dig
params
continue
params.permitted?
params
continue
params.permit!
continue
params.permit!
continue
params
continue
params[:pokemon]
continue
params
params.permitted?
